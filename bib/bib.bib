
@incollection{Bird2002:Optimization,
	title = "Algebraic Methods for Optimization Problems",
	author = "Richard Bird and Jeremy Gibbons and Shin Cheng Mu",
	year = "2002",
	booktitle = "Algebraic and Coalgebraic Methods in the Mathematics of Program Construction",
	editor = "Roland Backhouse and Roy Crole and Jeremy Gibbons",
	pages = "281--307",
	publisher = "Springer-Verlag",
	series = "Lecture Notes in Computer Science",
	url = "http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/acmmpc-optimization.pdf",
	volume = "2297"
}

@inproceedings{Bird2005:Polymorphic,
	title = "Polymorphic String Matching",
	author = "Richard S. Bird",
	year = "2005",
	address = "New York, NY, USA",
	booktitle = "Haskell Workshop",
	isbn = "1-59593-071-X",
	location = "Tallinn, Estonia",
	pages = "110--115",
	publisher = "ACM Press",
	doi = "10.1145/1088348.1088359"
}

@inproceedings{Bird2006:Improving,
	title = "Improving Saddleback Search: A Lesson in Algorithm Design",
	author = "Richard S. Bird",
	year = "2006",
	booktitle = "Mathematics of Program Construction",
	editor = "Tarmo Uustalu",
	isbn = "3-540-35631-2",
	pages = "82-89",
	publisher = "Springer",
	series = "Lecture Notes in Computer Science",
	volume = "4014",
	doi = "10.1007/11783596_8"
}

@inproceedings{Bird2006:Loopless,
	title = "Loopless Functional Algorithms",
	author = "Richard S. Bird",
	year = "2006",
	booktitle = "Mathematics of Program Construction",
	editor = "Tarmo Uustalu",
	isbn = "3-540-35631-2",
	pages = "90-114",
	publisher = "Springer",
	series = "Lecture Notes in Computer Science",
	volume = "4014",
	doi = "10.1007/11783596_9"
}

@article{Bird2006:Program,
	title = "A Program to Solve {S}udoku",
	author = "Richard S. Bird",
	year = "2006",
	journal = "Journal of Functional Programming",
	number = "6",
	pages = "671-679",
	volume = "16",
	doi = "10.1017/S0956796806006058"
}

@unpublished{Bird2012:backwards,
	title = "Be Kind, Rewind: A Modest Proposal about Traversal",
	author = "Jeremy Gibbons and Richard Bird",
	year = "2012",
	month = "May",
	note = "Submitted for publication (but rejected)",
	url = "http://www.comlab.ox.ac.uk/jeremy.gibbons/publications/backwards.pdf"
}

@article{Bird72:Integers,
	title = "Integers with Given Initial Digits",
	author = "Richard Bird",
	year = "1972",
	journal = "American Mathematical Monthly",
	pages = "367-370",
	url = "http://links.jstor.org/sici?sici=0002-9890%28197204%2979%3A4%3C367%3AIWGID%3E2.0.CO%3B2-2",
	volume = "79"
}

@article{Bird73:Note,
	title = "A Note on Definition by Cases",
	author = "Richard Bird",
	year = "1973",
	journal = "Zeitschrift f{\"u}r mathematische {L}ogik und {G}rundlagen der {M}athematik",
	pages = "207--208",
	volume = "19"
}

@article{Bird74:On,
	title = "On Transformations of Programs",
	author = "Richard Bird",
	year = "1974",
	journal = "Journal of Computer and System Sciences",
	pages = "22-35",
	volume = "8"
}

@article{Bird74:Speeding,
	title = "Speeding Up Programs",
	author = "Richard S. Bird",
	year = "1974",
	journal = "Computer Journal",
	number = "4",
	pages = "337--339",
	volume = "17"
}

@article{Bird75:Non,
	title = "Non Recursive Functionals",
	author = "Richard Bird",
	year = "1975",
	journal = "Zeitschrift f{\"u}r mathematische {L}ogik und {G}rundlagen der {M}athematik",
	pages = "41--46",
	volume = "21"
}

@book{Bird76:Programs,
	title = "Programs and Machines",
	author = "Richard Bird",
	year = "1976",
	publisher = "Wiley"
}

@article{Bird77:Improving,
	title = "Improving Programs by the Introduction of Recursion",
	author = "Richard S. Bird",
	year = "1977",
	journal = "Communications of the ACM",
	month = "nov",
	number = "11",
	pages = "856--863",
	volume = "20",
	doi = "10.1145/359863.359889"
}

@article{Bird77:Notes,
	title = "Notes on Recursion Elimination",
	author = "Richard S. Bird",
	year = "1977",
	journal = "Communications of the ACM",
	number = "6",
	pages = "434--439",
	volume = "20",
	doi = "10.1145/359605.359630"
}

@article{Bird77:Two,
	title = "Two-Dimensional Pattern Matching",
	author = "Richard S. Bird",
	year = "1977",
	journal = "Information Processing Letters",
	number = "5",
	pages = "168--170",
	volume = "6",
	doi = "10.1016/0020-0190(77)90017-5"
}

@article{Bird79:Recursion,
	title = "Recursion Elimination with Variable Parameters",
	author = "Richard S. Bird",
	year = "1979",
	journal = "Computer Journal",
	number = "2",
	pages = "151--154",
	volume = "22",
	doi = "10.1093/comjnl/22.2.151"
}

@article{Bird80:Tabulation,
	title = "Tabulation Techniques for Recursive Programs",
	author = "Richard S. Bird",
	year = "1980",
	journal = "ACM Computing Surveys",
	month = "dec",
	note = "See \cite{DBLP:journals/csur/Bird81}",
	number = "4",
	pages = "403--417",
	volume = "12",
	doi = "10.1145/356827.356831"
}

@article{Bird81:Joggers,
	title = "The Jogger's Problem",
	author = "Richard S. Bird",
	year = "1981",
	journal = "Information Processing Letters",
	number = "3",
	pages = "114--117",
	volume = "13",
	doi = "10.1016/0020-0190(81)90122-8"
}

@article{Bird84:Promotion,
	title = "The Promotion and Accumulation Strategies in Transformational Programming",
	author = "Richard S. Bird",
	year = "1984",
	journal = "ACM Transactions on Programming Languages and Systems",
	month = "oct",
	note = "See also \cite{Bird85:Promotion}",
	number = "4",
	pages = "487--504",
	volume = "6",
	doi = "10.1145/1780.1781"
}

@article{Bird84:Using,
	title = "Using Circular Programs to Eliminate Multiple Traversals of Data",
	author = "Richard S. Bird",
	year = "1984",
	journal = "Acta Informatica",
	pages = "239--250",
	volume = "21",
	doi = "10.1007/BF00264249"
}

@article{Bird85:Promotion,
	title = "Addendum to ``{T}he Promotion and Accumulation Strategies in Transformational Programming''",
	author = "Richard S. Bird",
	year = "1985",
	journal = "ACM Transactions on Programming Languages and Systems",
	month = "jul",
	number = "3",
	pages = "490--492",
	volume = "7"
}

@article{Bird86:Paragraph,
	title = "Transformational Programming and the Paragraph Problem",
	author = "Richard S. Bird",
	year = "1986",
	journal = "Science of Computer Programming",
	pages = "159--189",
	volume = "6",
	doi = "10.1016/0167-6423(86)90023-7"
}

@article{Bird87:Supercombinator,
	title = "A Formal Development of an Efficient Supercombinator Compiler",
	author = "R. S. Bird",
	year = "1987",
	journal = "Science of Computer Programming",
	pages = "113--137",
	volume = "8",
	doi = "10.1016/0167-6423(87)90017-7"
}

@incollection{Bird87:Theory,
	title = "An Introduction to the Theory of Lists",
	author = "Richard S. Bird",
	year = "1987",
	booktitle = "Logic of Programming and Calculi of Discrete Design",
	editor = "M. Broy",
	note = "NATO ASI Series~F Volume~36. Also available as Technical Monograph PRG-56, from the Programming Research Group, Oxford University",
	pages = "3--42",
	publisher = "Springer-Verlag"
}

@inproceedings{Bird88:Constructive,
	title = "Lectures on Constructive Functional Programming",
	author = "Richard S. Bird",
	year = "1988",
	booktitle = "Constructive Methods in Computer Science",
	editor = "Manfred Broy",
	note = "NATO ASI Series~F Volume~55. Also available as Technical Monograph PRG-69, from the Programming Research Group, Oxford University",
	pages = "151--218",
	publisher = "Springer-Verlag"
}

@article{Bird89:Algebraic,
	title = "Algebraic Identities for Program Calculation",
	author = "Richard S. Bird",
	year = "1989",
	journal = "Computer Journal",
	month = "apr",
	number = "2",
	pages = "122--126",
	volume = "32",
	doi = "10.1093/comjnl/32.2.122"
}

@article{Bird89:KMP,
	title = "Formal Derivation of a Pattern Matching Algorithm",
	author = "Richard S. Bird and Jeremy Gibbons and Geraint Jones",
	year = "1989",
	journal = "Science of Computer Programming",
	month = "jul",
	number = "2",
	pages = "93--104",
	volume = "12",
	doi = "10.1016/0167-6423(89)90036-1"
}

@incollection{Bird90:Calculus,
	title = "A Calculus of Functions for Program Derivation",
	author = "Richard S. Bird",
	year = "1990",
	booktitle = "Research Topics in Functional Programming",
	editor = "David A. Turner",
	note = "Also available as Technical Monograph PRG-64, from the Programming Research Group, Oxford University",
	organization = "University of Texas at Austin",
	publisher = "Addison-Wesley"
}

@incollection{Bird90:Small,
	title = "Small Specification Exercises",
	author = "Richard S. Bird",
	year = "1990",
	booktitle = "Beauty is our Business",
	editor = "W. H. J. Feijen and A. J. M. van Gasteren and D. Gries and J. Misra",
	pages = "36--43",
	publisher = "Springer-Verlag"
}

@inproceedings{Bird91:Knuths,
	title = "Knuth's Problem",
	author = "Richard S. Bird",
	year = "1991",
	booktitle = "IFIP TC2/WG2.1 Working Conference on Constructing Programs from Specifications",
	editor = "B. M{\"o}ller",
	pages = "1--8",
	publisher = "North-Holland"
}

@article{Bird91:Minout,
	title = "The {Minout} Problem",
	author = "Richard S. Bird",
	year = "1991",
	journal = "Journal of Functional Programming",
	month = "jan",
	number = "1",
	pages = "121--124",
	volume = "1"
}

@article{Bird92:Smallest,
	title = "The Smallest Upravel",
	author = "Richard S. Bird",
	year = "1992",
	journal = "Science of Computer Programming",
	pages = "281--292",
	volume = "18",
	doi = "10.1016/0167-6423(92)90020-C"
}

@article{Bird92:Two,
	title = "Two Greedy Algorithms",
	author = "Richard S. Bird",
	year = "1992",
	journal = "Journal of Functional Programming",
	number = "2",
	pages = "237--244",
	volume = "2"
}

@article{Bird92:Unravelling,
	title = "Unravelling Greedy Algorithms",
	author = "Richard S. Bird",
	year = "1992",
	journal = "Journal of Functional Programming",
	number = "3",
	pages = "375--385",
	volume = "2"
}

@article{Bird93:Last,
	title = "The Last Tail",
	author = "R. S. Bird",
	year = "1993",
	journal = "Journal of Functional Programming",
	number = "1",
	pages = "117--122",
	volume = "3"
}

@article{Bird96:Functional,
	title = "Functional Algorithm Design",
	author = "Richard S. Bird",
	year = "1996",
	address = "Amsterdam, The Netherlands, The Netherlands",
	issn = "0167-6423",
	journal = "Science of Computer Programming",
	number = "1-3",
	pages = "15--31",
	publisher = "Elsevier North-Holland, Inc.",
	volume = "26",
	doi = "10.1016/0167-6423(95)00033-X"
}

@article{Bird96:Generic,
	title = "Generic Functional Programming with Types and Relations",
	author = "Richard Bird and Oege de Moor and Paul Hoogendijk",
	year = "1996",
	journal = "Journal of Functional Programming",
	number = "1",
	pages = "1--28",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/BirdHoogendijkDeMoor1996Generic.pdf",
	volume = "6"
}

@inproceedings{Bird97:Allegories,
	title = "Allegories as a Basis for Algorithmics",
	author = "Richard S. Bird",
	year = "1997",
	booktitle = "LNCS~1290: Category Theory and Computer Science",
	editor = "Eugenio Moggi and Guiseppe Rosolini",
	month = "sep",
	pages = "34--46",
	publisher = "Springer-Verlag",
	doi = "10.1007/BFb0026979"
}

@article{Bird97:More,
	title = "More Haste, Less Speed: Lazy Versus Eager Evaluation",
	author = "Richard S. Bird and Geraint Jones and Oege de Moor",
	year = "1997",
	journal = "Journal of Functional Programming",
	number = "5",
	pages = "541--547",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/BirdJonesDeMoor1997More.pdf",
	volume = "7",
	doi = "10.1017/S0956796897002827"
}

@article{Bird97:OnBuilding,
	title = "On Building Trees with Minimum Height",
	author = "Richard S. Bird",
	year = "1997",
	journal = "Journal of Functional Programming",
	number = "4",
	pages = "441--445",
	volume = "7",
	doi = "10.1017/S0956796897002803"
}

@article{Bird97:OnMerging,
	title = "On Merging and Selection",
	author = "Richard S. Bird",
	year = "1997",
	journal = "Journal of Functional Programming",
	number = "3",
	pages = "349--354",
	volume = "7",
	doi = "10.1017/S0956796897002736"
}

@book{Bird98:Introduction,
	title = "Introduction to Functional Programming Using {H}askell",
	author = "Richard S. Bird",
	year = "1998",
	publisher = "Prentice-Hall",
	url = "http://www.cs.ox.ac.uk/publications/books/functional/"
}

@inproceedings{Bird99:Program,
	title = "Program Optimisation, Naturally",
	author = "Richard Bird and Jeremy Gibbons and Geraint Jones",
	year = "2000",
	booktitle = "Millenial Perspectives in Computer Science",
	editor = "J. W. Davies and A. W. Roscoe and J. C. P. Woodcock",
	publisher = "Palgrave",
	url = "http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/naturally.ps.gz"
}

@book{Bird:1997:AP:248932,
	author = {Bird, Richard and de Moor, Oege},
	title = {Algebra of Programming},
	year = {1997},
	isbn = {0-13-507245-X},
	publisher = {Prentice-Hall, Inc.},
	address = {Upper Saddle River, NJ, USA},
	keywords = {Category Theory}
}

@article{BirdCurtis2006:Finding,
	title = "Finding Celebrities: A Lesson in Functional Programming",
	author = "Richard S. Bird and Sharon Curtis",
	year = "2006",
	journal = "Journal of Functional Programming",
	number = "1",
	pages = "13-20",
	volume = "16",
	doi = "10.1017/S0956796805005678"
}

@inproceedings{BirdGibbons2003:Arithmetic,
	title = "Arithmetic Coding with Folds and Unfolds",
	author = "Richard Bird and Jeremy Gibbons",
	year = "2003",
	booktitle = "Advanced Functional Programming 4",
	editor = "Johan Jeuring and Simon Peyton Jones",
	pages = "1-26",
	publisher = "Springer-Verlag",
	series = "Lecture Notes in Computer Science",
	url = "http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/arith.pdf",
	volume = "2638"
}

@inproceedings{BirdHinze2003:Trouble,
	title = "Trouble Shared is Trouble Halved",
	author = "Richard Bird and Ralf Hinze",
	year = "2003",
	address = "New York, NY, USA",
	booktitle = "Haskell Workshop",
	isbn = "1-58113-758-3",
	location = "Uppsala, Sweden",
	pages = "1--6",
	publisher = "ACM Press",
	doi = "10.1145/871895.871896"
}

@article{BirdHughes87:Alpha-Beta,
	title = "The Alpha-Beta Algorithm: {An} Exercise in Program Transformation",
	author = "Richard S. Bird and John Hughes",
	year = "1987",
	journal = "Information Processing Letters",
	month = "jan",
	number = "1",
	pages = "53--57",
	volume = "24",
	doi = "10.1016/0020-0190(87)90198-0"
}

@incollection{BirdMeertens87:Two,
	title = "Two Exercises Found In a Book on Algorithmics",
	author = "Richard S. Bird and Lambert Meertens",
	year = "1987",
	booktitle = "Program Specification and Transformation",
	editor = "Lambert Meertens",
	pages = "451--457",
	publisher = "North-Holland"
}

@inproceedings{BirdMeertens98:Nested,
	title = "Nested Datatypes",
	author = "Richard S. Bird and Lambert Meertens",
	year = "1998",
	address = "Marstrand, Sweden",
	booktitle = "LNCS~1422: Proceedings of Mathematics of Program Construction",
	editor = "Johan Jeuring",
	month = "jun",
	pages = "52--67",
	publisher = "Springer-Verlag",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/BirdMeertens98Nested.pdf"
}

@article{BirdMu2005:Countdown,
	title = "Countdown: A Case Study in Origami Programming",
	author = "Richard S. Bird and Shin-Cheng Mu",
	year = "2005",
	journal = "Journal of Functional Programming",
	number = "5",
	pages = "679-702",
	volume = "15",
	doi = "10.1017/S0956796805005642"
}

@article{BirdPaterson99:Generalised,
	title = "Generalised Folds for Nested Datatypes",
	author = "Richard Bird and Ross Paterson",
	year = "1999",
	journal = "Formal Aspects of Computing",
	pages = "200--222",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/BirdPaterson99Generalised.pdf",
	volume = "11"
}

@article{BirdPaterson99:deBruijn,
	title = "de~{B}ruijn Notation as a Nested Datatype",
	author = "Richard S. Bird and Ross Paterson",
	year = "1999",
	journal = "Journal of Functional Programming",
	number = "1",
	pages = "77--91",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/BirdPaterson99DeBruijn.pdf",
	volume = "9",
	doi = "10.1017/S0956796899003366"
}

@article{BirdRavelo97:On,
	title = "On Computing Representatives",
	author = "Richard S. Bird and Jes{\'u}s N. Ravelo",
	year = "1997",
	journal = "Information Processing Letters",
	pages = "1--7",
	volume = "63",
	doi = "10.1016/S0020-0190(97)00087-2"
}

@article{BirdSadnicki2007:Online,
	title = "Minimal On-line List Labelling",
	author = "Richard S. Bird and Stefan Sadnicki",
	year = "2007",
	journal = "Information Processing Letters",
	number = "1",
	pages = "41-45",
	volume = "101"
}

@book{BirdWadler88:Introduction,
	title = "An Introduction to Functional Programming",
	author = "Richard S. Bird and Philip L. Wadler",
	year = "1988",
	publisher = "Prentice-Hall"
}

@inproceedings{BirddeMoor93:From,
	title = "From Dynamic Programming to Greedy Algorithms",
	author = "Richard S. Bird and Oege de Moor",
	year = "1993",
	booktitle = "IFIP TC2/WG2.1 State-of-the-Art Report on Formal Program Development",
	editor = "Bernhard M{\"o}ller and Helmut Partsch and Steve Schumann",
	publisher = "Springer-Verlag",
	series = "Lecture Notes in Computer Science",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/BirdDeMoor93From.pdf",
	volume = "755",
	doi = "10.1007/3-540-57499-9_16"
}

@article{BirddeMoor93:List,
	title = "List Partitions",
	author = "Richard S. Bird and Oege de Moor",
	year = "1993",
	journal = "Formal Aspects of Computing",
	pages = "61--78",
	volume = "5",
	doi = "10.1007/BF01211316"
}

@incollection{BirddeMoor93:Relational,
	title = "Relational Program Derivation and Context-Free Language Recognition",
	author = "Richard Bird and Oege de Moor",
	year = "1994",
	booktitle = "A Classical Mind: Essays in Honour of {C}.~{A}.~{R}.~{H}oare",
	chapter = "2",
	editor = "A. W. Roscoe",
	publisher = "Prentice-Hall"
}

@inproceedings{BirddeMoor93:Solving,
	title = "Solving Optimisation Problems with Catamorphisms",
	author = "Richard S. Bird and Oege de Moor",
	year = "1993",
	booktitle = "Mathematics of Program Construction",
	pages = "45--66",
	publisher = "Springer",
	series = "Lecture Notes in Computer Science",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/BirdDeMoor93Solving.pdf",
	volume = "669",
	doi = "10.1007/3-540-56625-2_7"
}

@unpublished{BirddeMoor94:Hybrid,
	title = "Hybrid Dynamic Programming",
	author = "Richard Bird and Oege de Moor",
	year = "1994",
	note = "Programming Research Group, Oxford"
}

@book{BirddeMoor96:Algebra,
	title = "The Algebra of Programming",
	author = "Richard Bird and Oege de Moor",
	year = "1996",
	publisher = "Prentice-Hall",
	url = "http://www.cs.ox.ac.uk/publications/books/algebra/"
}

@proceedings{DBLP:conf/alc/1997,
	title = "IFIP TC2 WG2.1 International Workshop on Algorithmic Languages and Calculi",
	year = "1997",
	editor = "Richard S. Bird and Lambert G. L. T. Meertens",
	isbn = "0-412-82050-1",
	publisher = "Chapman {\&amp;} Hall",
	series = "IFIP Conference Proceedings",
	volume = "95"
}

@inproceedings{DBLP:conf/aplas/MuB03,
	title = "Rebuilding a Tree from Its Traversals: A Case Study of Program Inversion",
	author = "Shin-Cheng Mu and Richard S. Bird",
	year = "2003",
	booktitle = "Asian Symposium on Programming Languages and Systems",
	editor = "Atsushi Ohori",
	isbn = "3-540-20536-5",
	pages = "265-282",
	publisher = "Springer",
	series = "Lecture Notes in Computer Science",
	url = "http://www.comlab.ox.ac.uk/people/richard.bird/online/MuBird2003Rebuilding.pdf",
	volume = "2895"
}

@inproceedings{DBLP:conf/icfp/Bird06,
	title = "Fifteen Years of Functional Pearls",
	author = "Richard S. Bird",
	year = "2006",
	booktitle = "International Conference on Functional Programming",
	editor = "John H. Reppy and Julia L. Lawall",
	isbn = "1-59593-309-3",
	pages = "215",
	doi = "10.1145/1159803.1159832"
}

@proceedings{DBLP:conf/mpc/1992,
	title = "Mathematics of Program Construction",
	year = "1993",
	editor = "Richard S. Bird and Carroll Morgan and Jim Woodcock",
	isbn = "3-540-56625-2",
	publisher = "Springer",
	series = "Lecture Notes in Computer Science",
	volume = "669",
	doi = "10.1007/3-540-56625-2"
}

@inproceedings{DBLP:conf/mpc/Bird08,
	title = "Zippy Tabulations of Recursive Functions",
	author = "Richard S. Bird",
	year = "2008",
	booktitle = "Mathematics of Program Construction",
	editor = "Philippe Audebaud and Christine Paulin-Mohring",
	isbn = "978-3-540-70593-2",
	pages = "92-109",
	publisher = "Springer",
	series = "Lecture Notes in Computer Science",
	volume = "5133",
	doi = "10.1007/978-3-540-70594-9_7"
}

@inproceedings{DBLP:conf/mpc/Bird95,
	title = "Functional Algorithm Design",
	author = "Richard S. Bird",
	year = "1995",
	booktitle = "Mathematics of Program Construction",
	isbn = "3-540-60117-1",
	pages = "2-17",
	publisher = "Springer",
	series = "Lecture Notes in Computer Science",
	volume = "947",
	doi = "10.1007/3-540-60117-1_2"
}

@inproceedings{DBLP:conf/mpc/MuB02,
	title = "Inverting Functions as Folds",
	author = "Shin-Cheng Mu and Richard S. Bird",
	year = "2002",
	booktitle = "Mathematics of Program Construction",
	editor = "Eerke A. Boiten and Bernhard M{\"o}ller",
	isbn = "3-540-43857-2",
	pages = "209-232",
	publisher = "Springer",
	series = "Lecture Notes in Computer Science",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/MuBird2002Inverting.pdf",
	volume = "2386"
}

@article{DBLP:journals/csur/Bird81,
	title = "Surveyor's Forum: A Recurring Bug",
	author = "Richard S. Bird",
	year = "1981",
	journal = "ACM Computing Surveys",
	number = "2",
	pages = "243",
	volume = "13",
	doi = "10.1145/356842.356848"
}

@article{DBLP:journals/jfp/Bird01,
	title = "Unfolding Pointer Algorithms",
	author = "Richard S. Bird",
	year = "2001",
	journal = "Journal of Functional Programming",
	number = "3",
	pages = "347-358",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/Bird2001Unfolding.pdf",
	volume = "11",
	doi = "10.1017/S0956796801003914"
}

@article{DBLP:journals/jfp/Bird01a,
	title = "Maximum Marking Problems",
	author = "Richard S. Bird",
	year = "2001",
	journal = "Journal of Functional Programming",
	number = "4",
	pages = "411-424",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/Bird2001Maximum.pdf",
	volume = "11",
	doi = "10.1017/S0956796801004038"
}

@article{DBLP:journals/jfp/Bird04,
	title = "On Tiling a Chessboard",
	author = "Richard S. Bird",
	year = "2004",
	journal = "Journal of Functional Programming",
	number = "6",
	pages = "613-622",
	volume = "14",
	doi = "10.1017/S095679680400512X"
}

@article{DBLP:journals/jfp/Bird91a,
	title = "On Removing Duplicates",
	author = "Richard S. Bird",
	year = "1991",
	journal = "Journal of Functional Programming",
	number = "2",
	pages = "235-243",
	volume = "1"
}

@article{DBLP:journals/jfp/Bird98,
	title = "Meertens' Number",
	author = "Richard S. Bird",
	year = "1998",
	journal = "Journal of Functional Programming",
	number = "1",
	pages = "83-88",
	volume = "8",
	doi = "10.1017/S0956796897002931"
}

@article{DBLP:journals/jfp/BirdM04,
	title = "Inverting the {B}urrows-{W}heeler Transform",
	author = "Richard S. Bird and Shin-Cheng Mu",
	year = "2004",
	journal = "Journal of Functional Programming",
	note = "Earlier version appeared at Haskell Workshop 2001",
	number = "6",
	pages = "603-612",
	url = "http://www.comlab.ox.ac.uk/people/richard.bird/online/BirdMu2004Inverting.pdf",
	volume = "14",
	doi = "10.1017/S0956796804005118"
}

@article{DBLP:journals/scp/MuB04,
	title = "Theory and Applications of Inverting Functions as Folds",
	author = "Shin-Cheng Mu and Richard S. Bird",
	year = "2004",
	journal = "Science of Computer Programming",
	number = "1-2",
	pages = "87-116",
	volume = "51",
	doi = "10.1016/j.scico.2003.09.003"
}

@article{Gibbons2006:Enumerating,
	title = "Enumerating the Rationals",
	author = "Jeremy Gibbons and David Lester and Richard Bird",
	year = "2006",
	journal = "Journal of Functional Programming",
	number = "3",
	pages = "281-292",
	url = "http://www.comlab.ox.ac.uk/oucl/work/jeremy.gibbons/publications/rationals.pdf",
	volume = "16"
}

@inproceedings{Hutton1990:combinators,
	author = "Graham Hutton",
	title = "{Parsing Using Combinators}",
	booktitle = "Proceedings of the 1989 Glasgow Workshop on
                Functional Programming",
	address = "Fraserburgh, Scotland",
	series = "Springer-Verlag Series of Workshops in Computing",
	year = 1990,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#combinators}
}

@inproceedings{Hutton1991:causal,
	author = "Graham Hutton",
	title = "{Functional Programming with Relations}",
	booktitle = "Proceedings of the 1990 Glasgow Workshop on
                Functional Programming",
	address = "Ullapool, Scotland",
	year = 1991,
	series = "Springer-Verlag Series of Workshops in Computing",
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#causal}
}

@inproceedings{Hutton1992:difun,
	author = "Graham Hutton and Ed Voermans",
	title = "{Making Functionality More General}",
	booktitle = "Proceedings of the 1991 Glasgow Workshop
                on Functional Programming",
	address = "Skye, Scotland",
	series = "Springer-Verlag Series of Workshops in Computing",
	year = 1992,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#difun}
}

@article{Hutton1992:parsing,
	author = "Graham Hutton",
	title = "{Higher-order Functions for Parsing}",
	journal = "Journal of Functional Programming",
	publisher = "Cambridge University Press",
	volume = 2,
	number = 3,
	pages = "323--343",
	month = jul,
	year = 1992,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#parsing}
}

@techreport{Hutton1992:pers,
	author = "Graham Hutton and Ed Voermans",
	title = "{A Calculational Theory of Pers as Types}",
	institution = "University of Glasgow",
	year = 1992,
	type = "Research Report",
	number = "1992/R1",
	month = jan,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#pers}
}

@phdthesis{Hutton1992:thesis,
	author = "Graham Hutton",
	title = "{Between Functions and Relations in Calculating Programs}",
	school = "University of Glasgow",
	month = oct,
	year = 1992,
	note = "Research Report FP-93-5",
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#thesis}
}

@inproceedings{Hutton1992:tutorial,
	author = "Graham Hutton",
	title = "{A Relational Derivation of a Functional Program}",
	booktitle = "Lecture Notes of the {STOP} Summer School on
                Constructive Algorithmics",
	address = "Ameland, The Netherlands",
	year = 1992,
	month = sep,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#tutorial}
}

@techreport{Hutton1993:iterpreter,
	author = "Graham Hutton",
	title = "{The Ruby Interpreter}",
	institution = "Chalmers University of Technology",
	year = 1993,
	type = "Research Report",
	number = "72",
	month = may,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#interpreter}
}

@inproceedings{Hutton1994:allegories,
	author = "Carolyn Brown and Graham Hutton",
	title = "{Categories, Allegories, and Circuit Design}",
	booktitle = "Proceedings of the 10th Annual {IEEE} Symposium on
                Logic in Computer Science",
	publisher = "{IEEE} Computer Society Press, Los Alamitos, California",
	month = jul,
	year = 1994,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#allegories}
}

@article{Hutton1994:hol-review,
	author = "Graham Hutton",
	title = "{Review of Mike Gordon and Tom Melham (editors),
                An Introduction to HOL, a Theorem Proving Environment
                for Higher Order Logic}",
	journal = "Journal of Functional Programming",
	publisher = "Cambridge University Press",
	volume = 4,
	number = 4,
	pages = "557--559",
	month = oct,
	year = 1994,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#hol-review}
}

@unpublished{Hutton1994:tool,
	author = "Graham Hutton and Erik Meijer and Ed Voermans",
	title = "{A Tool for Relational Programmers}",
	note = "Mathematics of Programming (MOP) mailing list",
	month = jan,
	year = 1994,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#tool}
}

@inproceedings{Hutton1995:bananas,
	author = "Erik Meijer and Graham Hutton",
	title = "{Bananas in Space: Extending fold and unfold
                to Exponential Types}",
	booktitle = "Proceedings of the 7th SIGPLAN-SIGARCH-WG2.8
                International Conference on Functional
                Programming and Computer Architecture",
	publisher = "ACM Press, La Jolla, California",
	month = jun,
	year = 1995,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#bananas},
	abstract = {Fold and unfold are general purpose functionals for processing and
constructing lists. By using the categorical approach of modelling
recursive datatypes as fixed points of functors, these functionals and
their algebraic properties were generalised from lists to polynomial
(sum-of-product) datatypes. However, the restriction to polynomial
datatypes is a serious limitation: it precludes the use of
exponentials (function-spaces), whereas it is central to functional
programming that functions are first-class values, and so exponentials
should be able to be used freely in datatype definitions. In this
paper we explain how Freyd's work on modelling recursive datatypes as
fixed points of difunctors shows how to generalise fold and unfold
from polynomial datatypes to those involving exponentials.
}
}

@article{Hutton1996:basics,
	author = "Graham Hutton and Erik Meijer",
	title = "{Back to Basics: Deriving Representation
                Changers Functionally}",
	journal = "Journal of Functional Programming",
	volume = 6,
	number = 1,
	pages = "181--188",
	publisher = "Cambridge University Press",
	month = jan,
	year = 1996,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#basics}
}

@techreport{Hutton1996:monparsing,
	author = "Graham Hutton and Erik Meijer",
	title = "{Monadic Parser Combinators}",
	institution = "Department of Computer Science,
                        University of Nottingham",
	type = "Technical Report",
	number = "NOTTCS-TR-96-4",
	year = 1996,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#monparsing},
	abstract = {In functional programming, a popular approach to building recursive
descent parsers is to model parsers as functions, and to define
higher-order functions (or combinators) that implement grammar
constructions such as sequencing, choice, and repetition. Such parsers
form an instance of a monad, an algebraic structure from mathematics
that has proved useful for addressing a number of computational
problems. The purpose of this report is to provide a step-by-step
tutorial on the monadic approach to building functional parsers, and
to explain some of the benefits that result from exploiting monads. No
prior knowledge of parser combinators or of monads is assumed. Indeed,
this report can also be viewed as a first introduction to the use of
monads in programming.
}
}

@article{Hutton1998:Parsing,
	author = "Graham Hutton and Erik Meijer",
	title = "{Monadic Parsing in Haskell}",
	journal = "Journal of Functional Programming",
	publisher = "Cambridge University Press",
	volume = 8,
	number = 4,
	month = jul,
	year = 1998,
	pages = "437--444"
}

@inproceedings{Hutton1998:semantics,
	title = "{Fold and Unfold for Program Semantics}",
	author = "Graham Hutton",
	booktitle = "{Proceedings of the 3rd ACM SIGPLAN International
                Conference on Functional Programming}",
	address = "Baltimore, Maryland",
	month = sep,
	year = 1998,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#semantics},
	abstract = {In this paper we explain how recursion operators can be used to
structure and reason about program semantics within a functional
language. In particular, we show how the recursion operator fold can
be used to structure denotational semantics, how the dual recursion
operator unfold can be used to structure operational semantics, and
how algebraic properties of these operators can be used to reason
about program semantics. The techniques are explained with the aid of
two main examples, the first concerning arithmetic expressions, and
the second concerning Milner's concurrent language CCS. The aim of the
paper is to give functional programmers new insights into recursion
operators, program semantics, and the relationships between them.
}
}

@article{Hutton1999:Fold,
	author = "Graham Hutton",
	title = "{A Tutorial on the Universality and Expressiveness of Fold}",
	journal = "Journal of Functional Programming",
	publisher = "Cambridge University Press",
	volume = 9,
	number = 4,
	pages = "355--372",
	month = jul,
	year = 1999
}

@inproceedings{Hutton1999:methods,
	author = "Jeremy Gibbons and Graham Hutton",
	title = "{Proof Methods for Structured Corecursive Programs}",
	booktitle = "Proceedings of the 1st Scottish Functional Programming
                Workshop",
	address = "Stirling, Scotland",
	month = aug,
	year = 1999,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#methods},
	abstract = {Corecursive programs produce values of greatest fixpoint types, in
contrast to recursive programs, which consume values of least fixpoint
types. There are a number of widely used methods for proving
properties of corecursive programs, including fixpoint induction, the
take lemma, and coinduction. However, these methods are all rather
low-level, in that they do not exploit the common structure that is
often present in corecursive definitions. We argue for a more
structured approach to proving properties of corecursive programs. In
particular, we show that by writing corecursive programs using a
simple operator that encapsulates a common pattern of corecursive
definition, we can then use high-level algebraic properties of this
operator to conduct proofs in a purely calculational style that avoids
the use of inductive or coinductive methods.
}
}

@inproceedings{Hutton2001:Fold,
	title = "{When is a Function a Fold or an Unfold?}",
	author = "Jeremy Gibbons and Graham Hutton and Thorsten Altenkirch",
	booktitle = "Proceedings of the 4th International Workshop on
                Coalgebraic Methods in Computer Science",
	series = "Electronic Notes in Theoretical Computer Science",
	publisher = "Elsevier Science",
	volume = "44.1",
	month = apr,
	year = 2001
}

@article{Hutton2001:Workshow,
	author = "{Graham Hutton, editor}",
	title = "{Proceedings of the 2000 ACM SIGPLAN Haskell Workshop}",
	publisher = "Elsevier Science",
	volume = 41,
	number = 1,
	journal = "Electronic Notes in Theoretical Computer Science",
	month = aug,
	year = 2001
}

@article{Hutton2001:approx,
	author = "Graham Hutton and Jeremy Gibbons",
	title = "{The Generic Approximation Lemma}",
	journal = "Information Processing Letters",
	volume = 79,
	number = 4,
	publisher = "Elsevier Science",
	pages = "197--201",
	month = aug,
	year = 2001,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#approx},
	abstract = {The approximation lemma is a simplification of the well-known take
lemma, and is used to prove properties of programs that produce lists
of values. We show how the approximation lemma, unlike the take lemma,
can naturally be generalised from lists to a large class of datatypes,
and present a generic approximation lemma that is parametric in the
datatype to which it applies. As a useful by-product, we find that
generalising the approximation lemma in this way also simplifies its
proof.
}
}

@proceedings{Hutton2002:Haskell,
	title = "{Journal of Functional Programming,
                Special Double Issue on Haskell}",
	editor = "Graham Hutton",
	publisher = "Cambridge University Press",
	volume = "12(4\&5)",
	year = 2002,
	month = jul
}

@article{Hutton2002:countdown,
	author = "Graham Hutton",
	title = "{The Countdown Problem}",
	journal = "Journal of Functional Programming",
	publisher = "Cambridge University Press",
	volume = 12,
	number = 6,
	pages = "609--616",
	month = nov,
	year = 2002,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#countdown},
	abstract = {We systematically develop a functional program that solves the
countdown problem, a numbers game in which the aim is to construct
arithmetic expressions satisfying certain constraints. Starting from a
formal specification of the problem, we present a simple but
inefficient program that solves the problem, and prove that this
program is correct. We then use program fusion to calculate an
equivalent but more efficient program, which is then further improved
by exploiting arithmetic properties.
}
}

@proceedings{Hutton2003:appsem-workshop,
	title = "{Proceedings of the First APPSEM-II Workshop}",
	editor = "Graham Hutton",
	note = "University of Nottingham",
	year = 2003,
	month = mar,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#appsem-workshop}
}

@inproceedings{Hutton2004:Introduction,
	author = "Graham Hutton",
	title = "{Introduction to Functional Programming}",
	booktitle = "Lecture Notes of the {MGS-APPSEM} Spring School",
	address = "Nottingham, England",
	year = 2004,
	month = mar
}

@inproceedings{Hutton2004:exceptions,
	author = "Graham Hutton and Joel Wright",
	title = "{Compiling Exceptions Correctly}",
	booktitle = "{Proceedings of the 7th International
                Conference on Mathematics of Program Construction}",
	address = "Stirling, Scotland",
	series = "Lecture Notes in Computer Science",
	volume = 3125,
	publisher = "Springer",
	month = jul,
	year = 2004,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#exceptions},
	abstract = {Exceptions are an important feature of modern programming languages,
but their compilation has traditionally been viewed as an advanced
topic. In this article we show that the basic method of compiling
exceptions using stack unwinding can be explained and verified both
simply and precisely, using elementary functional programming
techniques. In particular, we develop a compiler for a small language
with exceptions, together with a proof of its correctness.
}
}

@article{Hutton2005:Proof,
	author = "Jeremy Gibbons and Graham Hutton",
	title = "{Proof Methods for Corecursive Programs}",
	journal = "Fundamenta Informaticae Special Issue on
                Program Transformation",
	publisher = "IOS Press",
	volume = 66,
	number = 4,
	pages = "353-366",
	month = "April-May",
	year = 2005
}

@incollection{Hutton2006:Machine,
	author = "Graham Hutton and Joel Wright",
	title = "{Calculating an Exceptional Machine}",
	booktitle = "{Trends in Functional Programming volume 5}",
	publisher = "Intellect",
	year = 2006,
	editor = "Hans-Wolfgang Loidl",
	month = feb,
	note = "Selected papers from the Fifth Symposium on Trends in
                Functional Programming, Munich, November 2004."
}

@inproceedings{Hutton2006:Step,
	author = "Catherine Hope and Graham Hutton",
	title = "{Accurate Step Counting}",
	booktitle = "{Implementation and Application of Functional Languages}",
	publisher = "Springer Berlin / Heidelberg",
	series = "Lecture Notes in Computer Science",
	volume = 4015,
	year = 2006,
	note = "Selected papers from the 17th International Workshop
        on Implementation and Application of Functional Languages,
        Dublin, Ireland, September 2005"
}

@inproceedings{Hutton2006:compact,
	author = "Catherine Hope and Graham Hutton",
	title = "{Compact Fusion}",
	booktitle = "{Proceedings of the Workshop on Mathematically
                Structured Functional Programming}",
	address = "Kuressaare, Estonia",
	month = jul,
	year = 2006,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#compact},
	abstract = {There are many advantages to writing functional programs in a
compositional style, such as clarity and modularity. However, the
intermediate data structures produced may mean that the resulting
program is inefficient in terms of space. These may be removed using
deforestation techniques, but whether the space performance is
actually improved depends upon the structures being consumed in the
same order that they are produced. In this paper we explore this
problem, using examples where the intermediate structure is a list,
and present a solution. We then formalise these results by using
abstract machines to expose the underlying data structures involved.
}
}

@book{Hutton2007:Programming,
	author = "Graham Hutton",
	title = "{Programming in Haskell}",
	publisher = "Cambridge University Press",
	month = jan,
	year = 2007
}

@article{Hutton2007:interrupts,
	author = "Graham Hutton and Joel Wright",
	title = "{What is the Meaning of These Constant Interruptions?}",
	journal = "Journal of Functional Programming",
	publisher = "Cambridge University Press",
	volume = 17,
	number = 6,
	pages = "777--792",
	month = nov,
	year = 2007,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#interrupts},
	abstract = {Asynchronous exceptions, or interrupts, are important for writing
robust, modular programs, but are traditionally viewed as being
difficult from a semantic perspective. In this article we present a
simple, formally justified, semantics for interrupts. Our approach is
to show how a high-level semantics for interrupts can be justified
with respect to a low-level implementation, by means of a compiler and
its correctness theorem. In this manner we obtain two different
perspectives on the problem, formally shown to be equivalent, which
gives greater confidence in the correctness of our semantics.
}
}

@inproceedings{Hutton2008:Trees,
	author = "Graham Hutton and Diana Fulger",
	title = "{Reasoning About Effects: Seeing the Wood Through the Trees}",
	booktitle = "Proceedings of the Symposium on Trends in Functional Programming",
	address = "Nijmegen, The Netherlands",
	month = may,
	year = 2008
}

@inproceedings{Hutton2008:modular,
	author = "Mauro Jaskelioff and Neil Ghani and Graham Hutton",
	title = "{Modularity and Implementation of Mathematical
		Operational Semantics}",
	booktitle = "Proceedings of the Workshop on Mathematically
		Structured Functional Programming",
	address = "Reykjavik, Iceland",
	month = jul,
	year = 2008,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#modular},
	abstract = {Structural operational semantics is a popular technique for specifying
the meaning of programs by means of inductive clauses. One seeks
syntactic restrictions on those clauses so that the resulting
operational semantics is well-behaved. This approach is simple and
concrete but it has some drawbacks. Turi pioneered a more abstract
categorical treatment based upon the idea that operational semantics
is essentially a distribution of syntax over behaviour. In this
article we take Turi's approach in two new directions. Firstly, we
show how to write operational semantics as modular components and how
to combine such components to specify complete languages. Secondly, we
show how the categorical nature of Turi's operational semantics makes
it ideal for implementation in a functional programming language such
as Haskell.
}
}

@article{Hutton2009:Worker,
	author = "Andy Gill and Graham Hutton",
	title = "{The Worker/Wrapper Transformation}",
	journal = "Journal of Functional Programming",
	publisher = "Cambridge University Press",
	volume = 19,
	number = 2,
	pages = "227--251",
	month = mar,
	year = 2009
}

@inproceedings{Hutton2009:stm,
	author = "Liyang Hu and Graham Hutton",
	title = "{Towards a Verified Implementation of Software Transactional Memory}",
	booktitle = "{Trends in Functional Programming volume 9}",
	publisher = "Intellect",
	year = 2009,
	editor = "Peter Achten and Pieter Koopman and Marco Morazan",
	month = july,
	note = "Selected papers from the Ninth Symposium on Trends in
        	Functional Programming, Nijmegen, The Netherlands, May 2008.",
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#stm},
	abstract = {In recent years there has been much interest in the idea of concurrent
programming using transactional memory, for example as provided in STM
Haskell. While programmers are provided with a simple high-level model
of transactions in terms of a stop-the-world semantics, the low-level
implementation is rather more complex, using subtle optimisation
techniques to execute multiple concurrent transactions efficiently,
which is essential to the viability of the programming model. In this
article, we take the first steps towards a formally verified
implementation of transactional memory. In particular, we present a
stripped-down, idealised concurrent language inspired by STM Haskell,
and show how a low-level implementation of this language can be
justified with respect to a high-level semantics, by means of a
compiler and its correctness theorem, mechanically tested using
QuickCheck and HPC. The use of these tools proved to be invaluable in
the development of our formalisation.
}
}

@inproceedings{Hutton2010:MiddleMan,
	author = "Liyang Hu and Graham Hutton",
	title = "{Compiling Concurrency Correctly: Cutting out the Middle Man}",
	booktitle = "{Trends in Functional Programming volume 10}",
	publisher = "Intellect",
	year = 2010,
	editor = "Zoltan Horvath and Viktoria Zsok",
	month = sep,
	note = "Selected papers from the Tenth Symposium on Trends in
		Functional Programming, Komarno, Slovakia, June 2009."
}

@article{Hutton2010:f5,
	author = "Graham Hutton and Mauro Jaskelioff and Andy Gill",
	title = "{Factorising Folds for Faster Functions}",
	journal = "Journal of Functional Programming Special Issue
			on Generic Programming",
	publisher = "Cambridge University Press",
	volume = "20(3\&4)",
	pages = "353--373",
	year = 2010,
	month = jun,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#f5},
	abstract = {The worker/wrapper transformation is a general technique for improving
the performance of recursive programs by changing their types. The
previous formalisation (Gill & Hutton, 2009) was based upon a simple
fixed point semantics of recursion. In this article we develop a more
structured approach, based upon initial algebra semantics. In
particular, we show how the worker/wrapper transformation can be
applied to programs defined using the structured pattern of recursion
captured by fold operators, and illustrate our new technique with a
number of examples.
}
}

@unpublished{Hutton2011:contractive,
	author = "Graham Hutton and Mauro Jaskelioff",
	title = "{Representing Contractive Functions on Streams}",
	note = "Submitted to the Journal of Functional Programming",
	year = 2011,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#contractive},
	abstract = {Streams, or infinite lists, have many applications in functional
programming, and are naturally defined using recursive equations. But
how do we ensure that such equations make sense, i.e. that they
actually produce well-defined streams? In this article we present a
new approach to this problem, based upon the topological notion of
contractive functions on streams. In particular, we give a sound and
complete representation theorem for contractive functions on streams,
illustrate the use of this theorem as a practical means to produce
well-defined streams, and show how the efficiency of the resulting
definitions can be improved using another representation of
contractive functions.
}
}

@inproceedings{Hutton2012:mod-comp,
	author = "Laurence Day and Graham Hutton",
	title = "{Towards Modular Compilers For Effects}",
	booktitle = "{Trends in Functional Programming volume 12}",
	publisher = "Springer",
	series = "Lecture Notes in Computer Science",
	volume = 7193,
	editor = "Ricardo Pena and Rex Page",
	year = 2012,
	month = mar,
	note = "Selected papers from the 12th International Symposium on
	Trends in Functional Programming, Madrid, Spain, May 2011.",
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#mod-comp},
	abstract = {Compilers are traditionally factorised into a number of separate
phases, such as parsing, type checking, code generation, etc. However,
there is another potential factorisation that has received
comparatively little attention: the treatment of separate language
features, such as mutable state, input/output, exceptions, concurrency
and so forth. In this article we focus on the problem of modular
compilation, in which the aim is to develop compilers for separate
language features independently, which can then be combined as
required. We summarise our progress to date, issues that have arisen,
and further work.
}
}

@inproceedings{Hutton2013:aLaCarte,
	author = "Laurence E. Day and Graham Hutton",
	title = "{Compilation a la Carte}",
	note = "To appear in the volume of selected papers from the
	25th International Symposium on Implementation and Application of
        Functional Languages, Nijmegen, The Netherlands, August 2013",
	year = 2013
}

@inproceedings{Hutton2013:underperforming,
	author = "Jennifer Hackett, Graham Hutton and Mauro Jaskelioff",
	title = "{The Under Performing Unfold: A New Approach to
		Optimising Corecursive Programs}",
	note = "To appear in the volume of selected papers from the
	25th International Symposium on Implementation and Application of
        Functional Languages, Nijmegen, The Netherlands, August 2013",
	year = 2013,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#underperforming},
	abstract = {This paper presents a new approach to optimising corecursive programs
by factorisation. In particular, we focus on programs written using
the corecursion operator unfold. We use and expand upon the proof
techniques of guarded coinduction and unfold fusion, capturing a
pattern of generalising coinductive hypotheses by means of abstraction
and representation functions. The pattern we observe is simple, has
not been observed before, and is widely applicable. We develop a
general program factorisation theorem from this pattern, demonstrating
its utility with a range of practical examples.
}
}

@unpublished{Hutton2014:ccc,
	author = "Patrick Bahr and Graham Hutton",
	title = "{Calculating Correct Compilers}",
	note = "Submitted to the Journal of Functional Programming",
	year = 2014,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#ccc},
	abstract = {In this article we present a new approach to the problem of
calculating compilers. In particular, we develop a simple but general
technique that allows us to derive correct compilers from high-level
semantics by systematic calculation, with all the required compilation
machinery falling naturally out of the calculation process. Our
approach is based upon the use of standard equational reasoning
techniques, and has been applied to calculate compilers for a wide
range of language features and their combination, including arithmetic
expressions, exceptions, local and global state, various forms of
lambda calculi, bounded and unbounded loops, non-determinism, and
interrupts. All the calculations have been mechanically verified using
the Coq proof assistant.
}
}

@unpublished{Hutton2014:faster,
	author = "Jennifer Hackett and Graham Hutton",
	title = "{Worker/Wrapper/Makes It/Faster}",
	note = "To appear in the proceedings of the 19th ACM SIGPLAN
	International Conference on Functional Programming",
	year = 2014,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#faster},
	abstract = {Much research in program optimization has focused on formal approaches
to correctness: proving that the meaning of programs is preserved by
the optimisation. Paradoxically, there has been comparatively little
work on formal approaches to efficiency: proving that the performance
of optimized programs is actually improved. This paper addresses this
problem for a general-purpose optimization technique, the
worker/wrapper transformation. In particular, we use the call-by-need
variant of improvement theory to establish conditions under which the
worker/wrapper transformation is formally guaranteed to preserve or
improve the time performance of programs in lazy languages such as
Haskell.
}
}

@article{Hutton2014:workit,
	author = "Neil Sculthorpe and Graham Hutton",
	title = "{Work It, Wrap It, Fix It, Fold It}",
	journal = "Journal of Functional Programming",
	publisher = "Cambridge University Press",
	volume = 24,
	number = 1,
	pages = "113--127",
	month = jan,
	year = 2014,
	url = {http://www.cs.nott.ac.uk/~gmh/bib.html#workit},
	abstract = {The worker/wrapper transformation is a general-purpose technique for
refactoring recursive programs to improve their performance. The two
previous approaches to formalising the technique were based upon
different recursion operators and different correctness conditions. In
this article we show how these two approaches can be generalised in a
uniform manner by combining their correctness conditions, extend the
theory with new conditions that are both necessary and sufficient to
ensure the correctness of the worker/wrapper technique, and explore
the benefits that result. All the proofs have been mechanically
verified using the Agda system.
}
}

@inproceedings{MuBird2000:OnBuilding,
	title = "On Building Trees with Minimum Height, Relationally",
	author = "Shin-Cheng Mu and Richard Bird",
	year = "2000",
	booktitle = "First Asian Workshop on Programming Languages and Systems",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/MuBird2000OnBuilding.pdf"
}

@inproceedings{MuBird2001:Functional,
	title = "Functional Quantum Programming",
	author = "Shin-Cheng Mu and Richard Bird",
	year = "2001",
	address = "KAIST, Dajeaon, Korea",
	booktitle = "Asian Workshop on Programming Languages and Systems",
	month = "dec",
	url = "http://www.cs.ox.ac.uk/people/richard.bird/online/MuBird2001Functional.pdf"
}

@book{adámek2009abstract,
	title = {Abstract and Concrete Categories: The Joy of Cats},
	author = {Ad{\'a}mek, J. and Herrlich, H. and Strecker, G.E.},
	isbn = {9780486469348},
	lccn = {2009010561},
	series = {Dover books on mathematics},
	url = {http://books.google.com/books?id=rqT4PgAACAAJ},
	year = {2009},
	publisher = {Dover Publications, Incorporated},
	keywords = {Category Theory}
}

@book{awodey2010category,
	title = {Category Theory},
	author = {Awodey, S.},
	isbn = {9780199237180},
	lccn = {2010483708},
	series = {Oxford Logic Guides},
	url = {http://books.google.com/books?id=xC1bpwAACAAJ},
	year = {2010},
	publisher = {OUP Oxford},
	keywords = {Category Theory}
}

@book{bird1990introduction,
	title = {Introduction to Functional Programming},
	author = {Bird, R. and Wadler, P.},
	isbn = {9780134730912},
	series = {Prentice-Hall International series in computer science},
	url = {http://books.google.com/books?id=iM9GPgAACAAJ},
	year = {1990},
	publisher = {Prentice Hall Books}
}

@article{consensus,
	title = "Building a Consensus",
	author = "Richard Bird",
	year = "2011",
	journal = "Journal of Functional Programming",
	doi = "10.1017/S0956796810000316"
}

@article{determinants,
	title = "A simple division-free algorithm for computing determinants",
	author = "Richard S. Bird",
	year = "2011",
	journal = "Information Processing Letters",
	url = "http://dx.doi.org/10.1016/j.ipl.2011.08.006",
	doi = "10.1016/j.ipl.2011.08.006"
}

@book{doets2004haskell,
	title = {The Haskell road to logic, maths and programming},
	author = {Doets, K. and van Eijck, J.},
	isbn = {9780954300692},
	series = {Texts in computing},
	url = {http://books.google.com/books?id=5Xk-AQAAIAAJ},
	year = {2004},
	publisher = {King's College Publications}
}

@book{hudak2000haskell,
	title = {The Haskell School of Expression: Learning Functional Programming Through Multimedia},
	author = {Hudak, P.},
	isbn = {9780521644082},
	lccn = {99045529},
	url = {http://books.google.com/books?id=lQbth9j5j9oC},
	year = {2000},
	publisher = {Cambridge University Press}
}

@book{hutton2007programming,
	title = {Programming in Haskell},
	author = {Hutton, G.},
	isbn = {9781139461221},
	url = {http://books.google.com/books?id=olp7lAtpRX0C},
	year = {2007},
	publisher = {Cambridge University Press}
}

@book{lane1998categories,
	title = {Categories for the Working Mathematician},
	isbn = {9780387984032},
	lccn = {97045229},
	series = {Categories for the Working Mathematician},
	url = {http://books.google.com/books?id=MXboNPdTv7QC},
	year = {1998},
	publisher = {U.S. Government Printing Office},
	keywords = {Category Theory},
	author = {Mac Lane, S.}
}

@book{lane1999algebra,
	title = {Algebra},
	isbn = {9780821816462},
	lccn = {87071728},
	series = {Chelsea Publishing Series},
	url = {http://books.google.com/books?id=L6FENd8GHIUC},
	year = {1999},
	publisher = {Chelsea Publishing Company},
	keywords = {Algebra},
	author = {Mac Lane, S. and Birkhoff, G.}
}

@book{lang2002algebra,
	title = {Algebra},
	author = {Lang, S.},
	isbn = {9780387953854},
	lccn = {01054916},
	series = {Graduate Texts in Mathematics},
	url = {http://books.google.com/books?id=Fge-BwqhqIYC},
	year = {2002},
	publisher = {Springer New York},
	keywords = {Algebra}
}

@book{lawvere2009conceptual,
	title = {Conceptual Mathematics: A First Introduction to Categories},
	author = {Lawvere, F.W. and Schanuel, S.H.},
	isbn = {9780521894852},
	lccn = {2007043671},
	url = {http://books.google.com/books?id=h0zOGPlFmcQC},
	year = {2009},
	publisher = {Cambridge University Press},
	keywords = {Category Theory}
}

@book{lipovača2011learn,
	title = {Learn You a Haskell for Great Good!: A Beginner's Guide},
	author = {Lipova{\v{c}}a, M.},
	isbn = {9781593272951},
	year = {2011},
	publisher = {No Starch Press},
	url = {http://learnyouahaskell.com}
}

@book{marlow2013parallel,
	title = {Parallel and Concurrent Programming in Haskell: Techniques for Multicore and Multithreaded Programming},
	author = {Marlow, S.},
	isbn = {9781449335922},
	url = {http://books.google.com/books?id=wSkRAAAAQBAJ},
	year = {2013},
	publisher = {O'Reilly Media}
}

@book{o2008real,
	title = {Real World Haskell: Code You Can Believe In},
	author = {O'Sullivan, B. and Goerzen, J. and Stewart, D.B.},
	isbn = {9780596554309},
	year = {2008},
	publisher = {O'Reilly Media},
	url = {http://book.realworldhaskell.org},
	keywords = {Haskell}
}

@book{pinter2010book,
	title = {A Book of Abstract Algebra: Second Edition},
	author = {Pinter, C.C.},
	isbn = {9780486474175},
	lccn = {2009026228},
	series = {Dover Books on Mathematics},
	url = {http://books.google.com/books?id=ZAo\_AwAAQBAJ},
	year = {2010},
	publisher = {Dover Publications}
}

@book{pofad,
	title = "Pearls of Functional Algorithm Design",
	author = "Richard Bird",
	year = "2010",
	isbn = "9780521513388",
	publisher = "Cambridge University Press",
	url = "http://www.cambridge.org/gb/knowledge/isbn/item5600469"
}

@book{tarski2013introduction,
	title = {Introduction to Logic: and to the Methodology of Deductive Sciences},
	author = {Tarski, A.},
	isbn = {9780486318899},
	url = {http://books.google.com/books?id=vtzCAgAAQBAJ},
	year = {2013},
	publisher = {Dover Publications}
}

@book{thompson1999haskell,
	title = {Haskell: The Craft of Functional Programming},
	author = {Thompson, S.},
	isbn = {9780201342758},
	lccn = {98051704},
	series = {International computer science series},
	url = {http://books.google.com/books?id=a39QAAAAMAAJ},
	year = {1999},
	publisher = {Addison Wesley}
}

@inproceedings{uitbaf,
	title = "Understanding Idiomatic Traversals Backwards and Forwards",
	author = "Richard Bird and Jeremy Gibbons and Stefan Mehner and Janis Voigtlaender and Tom Schrijvers",
	year = "2013",
	booktitle = "Haskell Symposium",
	month = "sep",
	url = "http://www.comlab.ox.ac.uk/jeremy.gibbons/publications/uitbaf.pdf"
}

@book{velleman2006prove,
	title = {How to Prove It: A Structured Approach},
	author = {Velleman, D.J.},
	isbn = {9781139450973},
	lccn = {93014567},
	series = {How to Prove it: A Structured Approach},
	url = {http://books.google.com/books?id=sXt-ROLLNHcC},
	year = {2006},
	publisher = {Cambridge University Press}
}

